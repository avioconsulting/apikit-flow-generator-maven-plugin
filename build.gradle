import groovy.xml.XmlUtil
import org.apache.tools.ant.taskdefs.condition.Os

group 'com.avioconsulting.mule'
version '6.5.0.6'

configurations {
    provided
    bundled
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'

sourceSets {
    main {
        compileClasspath += configurations.provided
        compileClasspath += configurations.bundled
    }
    test {
        compileClasspath += configurations.provided
        compileClasspath += configurations.bundled
        runtimeClasspath += configurations.provided
        runtimeClasspath += configurations.bundled
    }
}

sourceCompatibility = 1.8

def getMavenCreds = { String id ->
    def m2Dir = new File(System.getProperty('user.home'), '.m2')
    def settingsXmlPath = new File(m2Dir, 'settings.xml')
    assert settingsXmlPath.exists()
    def xmlNode = new XmlParser().parse(settingsXmlPath.absolutePath)
    def serverCreds = xmlNode.servers.server.find { node -> node.id.text() == id }
    assert serverCreds != null
    [user: serverCreds.username.text(), password: serverCreds.password.text()]
}

def eeCreds = getMavenCreds('avio-mule-ee-releases')

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "http://repository.mulesoft.org/releases"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'https://devops.avioconsulting.com/nexus/repository/avio-releases/') {
                authentication userName: eeCreds.user,
                               password: eeCreds.password
            }
        }
    }
}

def getStudioPluginsDir() {
    String studioDir
    try {
        studioDir = this.getProperty('studio.dir') as String
    }
    catch (e) {
        throw new Exception('set studio.dir in either ~/gradle.properties or gradle.properties in this directory')
    }
    if (Os.isFamily(Os.FAMILY_MAC)) {
        def parts = [studioDir, 'Contents', 'Eclipse']
        studioDir = parts.join('/')
    }
    studioDir
}

// this is inside an OSGI bundle that's only installed with Studio
// need to get the JAR from inside
def getRestScaffolder = {
    def studioDir = getStudioPluginsDir()
    def files = new FileNameFinder().getFileNames("${studioDir}/plugins", "org.mule.tooling.apikit*.jar")
    assert !files.empty
    def jarFile = new File(files[0])
    return zipTree(jarFile).find {
        File file -> file.absolutePath.endsWith('apikit-scaffolder.jar')
    }
}

def getSoapScaffolder = {
    def studioDir = getStudioPluginsDir()
    def files = new FileNameFinder().getFileNames("${studioDir}/plugins", "org.mule.soapkit.tooling*.jar")
    assert !files.empty
    def jarFile = new File(files[0])
    return zipTree(jarFile).findAll {
        File file -> file.absolutePath.endsWith('mule-soapkit-scaffolder.jar')
    }
}

clean {
    // this is a generated artifact
    delete 'pom.xml'
}

// clean removes the expanded file, so bring it back
clean.doLast {
    getRestScaffolder()
    getSoapScaffolder()
}

task pluginDescriptor(type: Exec) {
    def isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
    def isChocolately = isWindows && 'mvn --version'.execute().waitFor() == 0
    def mvn = isWindows && !isChocolately ? 'mvn.cmd' : 'mvn'
    if (!isWindows || !isChocolately) {
        def whereCommand = isWindows ? 'where mvn.cmd' : 'which mvn'
        mvn = whereCommand.execute().text.trim()
    }
    commandLine mvn, '-e', '-B', 'org.apache.maven.plugins:maven-plugin-plugin:3.2:descriptor'
    doFirst {
        def pom = project.file('pom.xml')
        install.repositories.mavenInstaller.pom.writeTo(pom)
        assert pom.file, "[$pom.canonicalPath] was not created"
        def pomNode = new XmlParser().parse(pom)
        pomNode.groupId[0].value = project.group
        pomNode.artifactId[0].value = project.name
        pomNode.version[0].value = version
        pomNode.appendNode('packaging', 'maven-plugin')
        def buildNode = pomNode.appendNode('build')
        buildNode.appendNode('directory', '\${project.basedir}/build')
        buildNode.appendNode('outputDirectory', '\${project.build.directory}/classes/main')
        def repositories = pomNode.appendNode('repositories')
        def muleReleasesRepo = repositories.appendNode('repository')
        muleReleasesRepo.appendNode('id', 'mulesoft-releases')
        muleReleasesRepo.appendNode('url', 'http://repository.mulesoft.org/releases/')
        XmlUtil.serialize(pomNode, new FileWriter(pom))
    }

    doLast {
        final pluginDescriptor = new File((File) project.compileGroovy.destinationDir, 'META-INF/maven/plugin.xml')
        assert pluginDescriptor.file, "[$pluginDescriptor.canonicalPath] was not created"
        println "Plugin descriptor file:$pluginDescriptor.canonicalPath is created successfully"
    }
}

compileGroovy.doLast {
    pluginDescriptor.execute()
}

dependencies {
    def scaffolder = getRestScaffolder()
    assert scaffolder.exists()
    println "REST Scaffolder is ${scaffolder}"
    bundled files(scaffolder.absolutePath)
    def soapScaffolder = getSoapScaffolder()
    println "SOAP Scaffolder is ${soapScaffolder}"
    bundled files(soapScaffolder)
    compile 'org.mule.runtime:mule-api:1.1.3'
    runtime "org.mule.raml:raml-parser-interface-impl-v2:1.1.7"
    runtime 'org.mule.tools:mule-apikit-common:1.1.7'
    runtime 'jaxen:jaxen:1.1.4'
    // transitive dependencies
    runtime 'org.raml:raml-parser:0.8.27'
    runtime 'org.raml:raml-parser-2:1.0.26'
    // indirect dependency
    provided 'org.apache.maven:maven-plugin-api:3.3.9'
    // direct
    compile group: 'org.jdom', name: 'jdom2', version: '2.0.5'
    // SOAP direct
    compile group: 'wsdl4j', name: 'wsdl4j', version: '1.6.3'
    provided 'org.apache.maven.plugin-tools:maven-plugin-annotations:3.5'
    provided 'org.apache.maven:maven-core:3.5.4'
    compile 'org.codehaus.groovy:groovy-all:2.4.6'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'commons-io:commons-io:2.4'
}

jar {
    from {
        configurations.bundled.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
